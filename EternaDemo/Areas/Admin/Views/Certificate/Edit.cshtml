@model EternaDemo.Models.Certificate

@{
    ViewBag.Title = "Edit Certificate";
    Layout = "~/Areas/Admin/Views/Shared/_LayoutAdmin.cshtml";
}

<div class="container py-5">
    <div class="card shadow-sm border-0 rounded-4">
        <div class="card-header bg-warning text-white d-flex justify-content-between align-items-center">
            <h4 class="mb-0"><i class="bi bi-pencil-square"></i> Edit Certificate</h4>
            <a href="@Url.Action("Index", "Certificate", new { area = "Admin" })" class="btn btn-light btn-sm fw-semibold">
                <i class="bi bi-arrow-left"></i> Back
            </a>
        </div>

        <div class="card-body px-5 py-4">
            @using (Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.Id)

                <div class="mb-3">
                    @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "form-label fw-semibold" })
                    @Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.Number, htmlAttributes: new { @class = "form-label fw-semibold" })
                    @Html.EditorFor(model => model.Number, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Number, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.IssueDate, htmlAttributes: new { @class = "form-label fw-semibold" })
                    @Html.EditorFor(model => model.IssueDate, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                    @Html.ValidationMessageFor(model => model.IssueDate, "", new { @class = "text-danger" })
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.FileUrl, htmlAttributes: new { @class = "form-label fw-semibold" })
                    @Html.EditorFor(model => model.FileUrl, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.FileUrl, "", new { @class = "text-danger" })
                    @if (!string.IsNullOrEmpty(Model.FileUrl))
                    {
                        <div class="mt-2">
                            <label class="fw-semibold text-secondary">Current file:</label><br />
                            @{
                                var ext = System.IO.Path.GetExtension(Model.FileUrl)?.ToLower();
                                if (ext == ".jpg" || ext == ".jpeg" || ext == ".png" || ext == ".gif")
                                {
                                    <img src="@Model.FileUrl" alt="Certificate Image" class="img-thumbnail" style="width:120px; height:120px; object-fit:cover;" />
                                }
                                else if (ext == ".pdf")
                                {
                                    <a href="@Model.FileUrl" target="_blank" class="btn btn-outline-secondary btn-sm mt-2">
                                        <i class="bi bi-file-earmark-pdf"></i> View PDF
                                    </a>
                                }
                            }
                        </div>
                    }
                </div>

                <div class="mb-3">
                    @Html.LabelFor(model => model.GemstoneId, "Gemstone", htmlAttributes: new { @class = "form-label fw-semibold" })
                    @Html.DropDownList("GemstoneId", null, "-- Select Gemstone --", htmlAttributes: new { @class = "form-select" })
                    @Html.ValidationMessageFor(model => model.GemstoneId, "", new { @class = "text-danger" })
                </div>

                <div class="d-flex justify-content-end gap-2">
                    <button type="submit" class="btn btn-warning text-white fw-semibold">
                        <i class="bi bi-save"></i> Save
                    </button>
                    <a href="@Url.Action("Index", "Certificate", new { area = "Admin" })" class="btn btn-secondary fw-semibold">
                        <i class="bi bi-arrow-left-circle"></i> Cancel
                    </a>
                </div>
            }
        </div>
    </div>
</div>
